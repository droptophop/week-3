@model PizzaStore.Client.Models.PizzaViewModel

@* HTML - creates a form *@
<form action="/get" method="get">
    <h5>Select a crust:</h5>
    <select name="crust">
        @foreach (var crust in @Model.Crusts)
        {
            <option value="@crust.Name">@crust.Name</option>
            @* <input type="radio" name="crust" id="crust" value="@crust.Name" data-val="true" data-val-required="Needed">
            <label for="crust">@crust.Name</label> *@
        }
        @Html.ValidationMessageFor(m => m.Crust, null, new { @class = "text-danger" })
    </select>
    <br><br>
    
    <h5>Select a size:</h5>
    <select name="size" id="">
        @foreach (var size in @Model.Sizes)
        {
            <option value="@size.Name">@size.Name</option>
            @* <input type="radio" name="size" id="size" value="@size.Name" data-val="true" data-val-required="Needed">
            <label for="crust">@size.Name</label> *@
        }
        @Html.ValidationMessageFor(m => m.Size, null, new { @class = "text-danger" })
    </select>
    <br><br>
    
    <h5>Select a pizza:</h5>
    <select name="menuItems" id="">
        @foreach (var pizza in @Model.MenuItems)
        {
            <option value="@pizza.Name">@pizza.Name</option>
            @* <input type="radio" name="size" id="size" value="@size.Name" data-val="true" data-val-required="Needed">
            <label for="crust">@size.Name</label> *@
        }
        @Html.ValidationMessageFor(m => m.SelectedPizza, null, new { @class = "text-danger" })
    </select>
    <br><br>
    
    @if(@Model.SelectedPizza == @Model.CustomPizza.Name)
    {
        <h5>Select your toppings:</h5>
        @foreach (var topping in @Model.Toppings)
        {
            <input type="checkbox" name="topping" id="topping" value="@topping.Name" data-val="true" data-val-required="Needed">
            <label for="crust">@topping.Name</label>
        }
        @Html.ValidationMessageFor(m => m.SelectedToppings, null, new { @class = "text-danger" })
        <br>
    }

    <button type="submit">Add to Order</button>
</form>
<br>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Size)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Crust)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Pizza)
            </th>
            <th>
                Price
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach(var p in @Model.PizzaList)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => p.Size.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => p.Crust.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelitem => p.Name)
                </td>
                <td>
                    $10.99
                </td>
                <td>
                    <a asp-action="Get" asp-route-id="">Edit</a> |
                    <a asp-action="Get" asp-route-id="">Details</a> |
                    <a asp-action="Get" asp-route-id="">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@* html helper - creates a form *@
@* @using(Html.BeginForm("PlaceOrder", "Order", null, FormMethod.Post))
{
    @Html.AntiForgeryToken();
    foreach(var crust in Model.Crusts)
    {
        @Html.RadioButtonFor(m => m.Crust, crust.Name);
        @Html.LabelFor(m => m.Crust);
        @Html.ValidationMessageFor(m => m.Crust);
    }

    foreach(var topping in Model.Toppings)
    {
        @Html.CheckBoxFor(m => m.SelectedTopping, new { name = "SelectedToppings", value = topping });
        @Html.LabelFor(m => m.SelectedTopping);
        @Html.ValidationMessageFor(m => m.SelectedTopping);
    }
    
    @Html.DropDownListFor(m => m.Sizes, new SelectList(Model.Sizes));
    @Html.ValidationMessageFor(m => m.Size);

    <button type="submit">Place Order</button>
} *@